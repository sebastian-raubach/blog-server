/*
 * This file is generated by jOOQ.
 */
package blog.raubach.database.codegen.tables;


import blog.raubach.database.codegen.BlogDb;
import blog.raubach.database.codegen.tables.records.RelationshipsRecord;

import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Relationships extends TableImpl<RelationshipsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>blog_db.relationships</code>
     */
    public static final Relationships RELATIONSHIPS = new Relationships();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelationshipsRecord> getRecordType() {
        return RelationshipsRecord.class;
    }

    /**
     * The column <code>blog_db.relationships.post_a_id</code>.
     */
    public final TableField<RelationshipsRecord, Integer> POST_A_ID = createField(DSL.name("post_a_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>blog_db.relationships.post_b_id</code>.
     */
    public final TableField<RelationshipsRecord, Integer> POST_B_ID = createField(DSL.name("post_b_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>blog_db.relationships.created_on</code>.
     */
    public final TableField<RelationshipsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>blog_db.relationships.updated_on</code>.
     */
    public final TableField<RelationshipsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Relationships(Name alias, Table<RelationshipsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Relationships(Name alias, Table<RelationshipsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>blog_db.relationships</code> table reference
     */
    public Relationships(String alias) {
        this(DSL.name(alias), RELATIONSHIPS);
    }

    /**
     * Create an aliased <code>blog_db.relationships</code> table reference
     */
    public Relationships(Name alias) {
        this(alias, RELATIONSHIPS);
    }

    /**
     * Create a <code>blog_db.relationships</code> table reference
     */
    public Relationships() {
        this(DSL.name("relationships"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : BlogDb.BLOG_DB;
    }

    @Override
    public UniqueKey<RelationshipsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Relationships.RELATIONSHIPS, DSL.name("KEY_relationships_PRIMARY"), new TableField[] { Relationships.RELATIONSHIPS.POST_A_ID, Relationships.RELATIONSHIPS.POST_B_ID }, true);
    }

    @Override
    public Relationships as(String alias) {
        return new Relationships(DSL.name(alias), this);
    }

    @Override
    public Relationships as(Name alias) {
        return new Relationships(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Relationships rename(String name) {
        return new Relationships(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Relationships rename(Name name) {
        return new Relationships(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
    // @formatter:on
}
