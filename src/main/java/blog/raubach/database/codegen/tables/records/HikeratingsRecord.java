/*
 * This file is generated by jOOQ.
 */
package blog.raubach.database.codegen.tables.records;


import blog.raubach.database.codegen.tables.Hikeratings;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HikeratingsRecord extends UpdatableRecordImpl<HikeratingsRecord> implements Record4<Integer, Short, Short, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>blog_db.hikeratings.post_id</code>.
     */
    public void setPostId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>blog_db.hikeratings.post_id</code>.
     */
    public Integer getPostId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>blog_db.hikeratings.weather</code>.
     */
    public void setWeather(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>blog_db.hikeratings.weather</code>.
     */
    public Short getWeather() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>blog_db.hikeratings.path</code>.
     */
    public void setPath(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>blog_db.hikeratings.path</code>.
     */
    public Short getPath() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>blog_db.hikeratings.view</code>.
     */
    public void setView(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>blog_db.hikeratings.view</code>.
     */
    public Short getView() {
        return (Short) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Short, Short, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Short, Short, Short> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Hikeratings.HIKERATINGS.POST_ID;
    }

    @Override
    public Field<Short> field2() {
        return Hikeratings.HIKERATINGS.WEATHER;
    }

    @Override
    public Field<Short> field3() {
        return Hikeratings.HIKERATINGS.PATH;
    }

    @Override
    public Field<Short> field4() {
        return Hikeratings.HIKERATINGS.VIEW;
    }

    @Override
    public Integer component1() {
        return getPostId();
    }

    @Override
    public Short component2() {
        return getWeather();
    }

    @Override
    public Short component3() {
        return getPath();
    }

    @Override
    public Short component4() {
        return getView();
    }

    @Override
    public Integer value1() {
        return getPostId();
    }

    @Override
    public Short value2() {
        return getWeather();
    }

    @Override
    public Short value3() {
        return getPath();
    }

    @Override
    public Short value4() {
        return getView();
    }

    @Override
    public HikeratingsRecord value1(Integer value) {
        setPostId(value);
        return this;
    }

    @Override
    public HikeratingsRecord value2(Short value) {
        setWeather(value);
        return this;
    }

    @Override
    public HikeratingsRecord value3(Short value) {
        setPath(value);
        return this;
    }

    @Override
    public HikeratingsRecord value4(Short value) {
        setView(value);
        return this;
    }

    @Override
    public HikeratingsRecord values(Integer value1, Short value2, Short value3, Short value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HikeratingsRecord
     */
    public HikeratingsRecord() {
        super(Hikeratings.HIKERATINGS);
    }

    /**
     * Create a detached, initialised HikeratingsRecord
     */
    public HikeratingsRecord(Integer postId, Short weather, Short path, Short view) {
        super(Hikeratings.HIKERATINGS);

        setPostId(postId);
        setWeather(weather);
        setPath(path);
        setView(view);
    }

    /**
     * Create a detached, initialised HikeratingsRecord
     */
    public HikeratingsRecord(blog.raubach.database.codegen.tables.pojos.Hikeratings value) {
        super(Hikeratings.HIKERATINGS);

        if (value != null) {
            setPostId(value.getPostId());
            setWeather(value.getWeather());
            setPath(value.getPath());
            setView(value.getView());
        }
    }
    // @formatter:on
}
