/*
 * This file is generated by jOOQ.
 */
package blog.raubach.database.codegen.tables;


import blog.raubach.database.codegen.BlogDb;
import blog.raubach.database.codegen.tables.records.IndividualsRecord;

import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Individuals extends TableImpl<IndividualsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>blog_db.individuals</code>
     */
    public static final Individuals INDIVIDUALS = new Individuals();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndividualsRecord> getRecordType() {
        return IndividualsRecord.class;
    }

    /**
     * The column <code>blog_db.individuals.id</code>.
     */
    public final TableField<IndividualsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>blog_db.individuals.name</code>.
     */
    public final TableField<IndividualsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>blog_db.individuals.user_id</code>.
     */
    public final TableField<IndividualsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>blog_db.individuals.photo</code>.
     */
    public final TableField<IndividualsRecord, byte[]> PHOTO = createField(DSL.name("photo"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>blog_db.individuals.created_on</code>.
     */
    public final TableField<IndividualsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>blog_db.individuals.updated_on</code>.
     */
    public final TableField<IndividualsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Individuals(Name alias, Table<IndividualsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Individuals(Name alias, Table<IndividualsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>blog_db.individuals</code> table reference
     */
    public Individuals(String alias) {
        this(DSL.name(alias), INDIVIDUALS);
    }

    /**
     * Create an aliased <code>blog_db.individuals</code> table reference
     */
    public Individuals(Name alias) {
        this(alias, INDIVIDUALS);
    }

    /**
     * Create a <code>blog_db.individuals</code> table reference
     */
    public Individuals() {
        this(DSL.name("individuals"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : BlogDb.BLOG_DB;
    }

    @Override
    public Identity<IndividualsRecord, Integer> getIdentity() {
        return (Identity<IndividualsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<IndividualsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Individuals.INDIVIDUALS, DSL.name("KEY_individuals_PRIMARY"), new TableField[] { Individuals.INDIVIDUALS.ID }, true);
    }

    @Override
    public Individuals as(String alias) {
        return new Individuals(DSL.name(alias), this);
    }

    @Override
    public Individuals as(Name alias) {
        return new Individuals(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Individuals rename(String name) {
        return new Individuals(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Individuals rename(Name name) {
        return new Individuals(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Integer, byte[], Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
    // @formatter:on
}
