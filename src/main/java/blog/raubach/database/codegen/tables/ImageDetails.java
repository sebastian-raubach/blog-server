/*
 * This file is generated by jOOQ.
 */
package blog.raubach.database.codegen.tables;


import blog.raubach.database.codegen.BlogDb;
import blog.raubach.database.codegen.tables.records.ImageDetailsRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageDetails extends TableImpl<ImageDetailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>blog_db.image_details</code>
     */
    public static final ImageDetails IMAGE_DETAILS = new ImageDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImageDetailsRecord> getRecordType() {
        return ImageDetailsRecord.class;
    }

    /**
     * The column <code>blog_db.image_details.image_id</code>.
     */
    public final TableField<ImageDetailsRecord, Integer> IMAGE_ID = createField(DSL.name("image_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>blog_db.image_details.image_path</code>.
     */
    public final TableField<ImageDetailsRecord, String> IMAGE_PATH = createField(DSL.name("image_path"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>blog_db.image_details.post_id</code>.
     */
    public final TableField<ImageDetailsRecord, Integer> POST_ID = createField(DSL.name("post_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>blog_db.image_details.is_primary</code>.
     */
    public final TableField<ImageDetailsRecord, Boolean> IS_PRIMARY = createField(DSL.name("is_primary"), SQLDataType.BOOLEAN.defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>blog_db.image_details.description</code>.
     */
    public final TableField<ImageDetailsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private ImageDetails(Name alias, Table<ImageDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ImageDetails(Name alias, Table<ImageDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `image_details` as select `blog`.`images`.`id` AS `image_id`,`blog`.`images`.`path` AS `image_path`,`blog`.`postimages`.`post_id` AS `post_id`,`blog`.`postimages`.`is_primary` AS `is_primary`,`blog`.`postimages`.`description` AS `description` from (`blog`.`images` left join `blog`.`postimages` on((`blog`.`postimages`.`image_id` = `blog`.`images`.`id`)))"));
    }

    /**
     * Create an aliased <code>blog_db.image_details</code> table reference
     */
    public ImageDetails(String alias) {
        this(DSL.name(alias), IMAGE_DETAILS);
    }

    /**
     * Create an aliased <code>blog_db.image_details</code> table reference
     */
    public ImageDetails(Name alias) {
        this(alias, IMAGE_DETAILS);
    }

    /**
     * Create a <code>blog_db.image_details</code> table reference
     */
    public ImageDetails() {
        this(DSL.name("image_details"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : BlogDb.BLOG_DB;
    }

    @Override
    public ImageDetails as(String alias) {
        return new ImageDetails(DSL.name(alias), this);
    }

    @Override
    public ImageDetails as(Name alias) {
        return new ImageDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageDetails rename(String name) {
        return new ImageDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageDetails rename(Name name) {
        return new ImageDetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, Boolean, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
    // @formatter:on
}
