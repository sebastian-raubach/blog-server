/*
 * This file is generated by jOOQ.
 */
package blog.raubach.database.codegen.tables;


import blog.raubach.database.binding.SiteFacilitiesBinding;
import blog.raubach.database.binding.SiteRatingBinding;
import blog.raubach.database.codegen.BlogDb;
import blog.raubach.database.codegen.enums.SitesGroundtype;
import blog.raubach.database.codegen.enums.SitesSitetype;
import blog.raubach.database.codegen.tables.records.SitesRecord;
import blog.raubach.pojo.SiteFacilities;
import blog.raubach.pojo.SiteRating;

import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sites extends TableImpl<SitesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>blog_db.sites</code>
     */
    public static final Sites SITES = new Sites();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SitesRecord> getRecordType() {
        return SitesRecord.class;
    }

    /**
     * The column <code>blog_db.sites.id</code>.
     */
    public final TableField<SitesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>blog_db.sites.name</code>.
     */
    public final TableField<SitesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>blog_db.sites.description</code>.
     */
    public final TableField<SitesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>blog_db.sites.sitetype</code>.
     */
    public final TableField<SitesRecord, SitesSitetype> SITETYPE = createField(DSL.name("sitetype"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("campsite", SQLDataType.VARCHAR)).asEnumDataType(blog.raubach.database.codegen.enums.SitesSitetype.class), this, "");

    /**
     * The column <code>blog_db.sites.groundtype</code>.
     */
    public final TableField<SitesRecord, SitesGroundtype> GROUNDTYPE = createField(DSL.name("groundtype"), SQLDataType.VARCHAR(6).nullable(false).defaultValue(DSL.inline("grass", SQLDataType.VARCHAR)).asEnumDataType(blog.raubach.database.codegen.enums.SitesGroundtype.class), this, "");

    /**
     * The column <code>blog_db.sites.latitude</code>.
     */
    public final TableField<SitesRecord, Double> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>blog_db.sites.longitude</code>.
     */
    public final TableField<SitesRecord, Double> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>blog_db.sites.elevation</code>.
     */
    public final TableField<SitesRecord, Double> ELEVATION = createField(DSL.name("elevation"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>blog_db.sites.rating</code>.
     */
    public final TableField<SitesRecord, SiteRating> RATING = createField(DSL.name("rating"), SQLDataType.JSON.nullable(false), this, "", new SiteRatingBinding());

    /**
     * The column <code>blog_db.sites.facilities</code>.
     */
    public final TableField<SitesRecord, SiteFacilities> FACILITIES = createField(DSL.name("facilities"), SQLDataType.JSON.nullable(false), this, "", new SiteFacilitiesBinding());

    /**
     * The column <code>blog_db.sites.created_on</code>.
     */
    public final TableField<SitesRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>blog_db.sites.updated_on</code>.
     */
    public final TableField<SitesRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Sites(Name alias, Table<SitesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sites(Name alias, Table<SitesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>blog_db.sites</code> table reference
     */
    public Sites(String alias) {
        this(DSL.name(alias), SITES);
    }

    /**
     * Create an aliased <code>blog_db.sites</code> table reference
     */
    public Sites(Name alias) {
        this(alias, SITES);
    }

    /**
     * Create a <code>blog_db.sites</code> table reference
     */
    public Sites() {
        this(DSL.name("sites"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : BlogDb.BLOG_DB;
    }

    @Override
    public Identity<SitesRecord, Integer> getIdentity() {
        return (Identity<SitesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SitesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Sites.SITES, DSL.name("KEY_sites_PRIMARY"), new TableField[] { Sites.SITES.ID }, true);
    }

    @Override
    public Sites as(String alias) {
        return new Sites(DSL.name(alias), this);
    }

    @Override
    public Sites as(Name alias) {
        return new Sites(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sites rename(String name) {
        return new Sites(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sites rename(Name name) {
        return new Sites(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, SitesSitetype, SitesGroundtype, Double, Double, Double, SiteRating, SiteFacilities, Timestamp, Timestamp> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
    // @formatter:on
}
